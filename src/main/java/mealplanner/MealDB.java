package mealplanner;

import org.postgresql.ds.PGSimpleDataSource;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class MealDB {

    private final DataSource dataSource;
    private static final String[] HOSTS = new String[]{"localhost"};
    private static final String DB_NAME = "meals_db";
    private static final String USER = "postgres";
    private static final String PASSWORD = "1111";

    public MealDB() throws SQLException {
        PGSimpleDataSource ds = new PGSimpleDataSource();
        ds.setServerNames(HOSTS);
        ds.setDatabaseName(DB_NAME);
        ds.setUser(USER);
        ds.setPassword(PASSWORD);
        dataSource = ds;
        createTables();
    }

    private void createTables() throws SQLException {
        try(Connection con = dataSource.getConnection();
            Statement statement = con.createStatement()) {
            statement.executeUpdate("""
                    CREATE TABLE IF NOT EXISTS meals(
                    category VARCHAR(10) NOT NULL,
                    meal VARCHAR(50) NOT NULL,
                    meal_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY)
                    """);
            statement.executeUpdate("""
                    CREATE TABLE IF NOT EXISTS ingredients(
                    ingredient VARCHAR(20) NOT NULL,
                    ingredient_id INT GENERATED BY DEFAULT AS IDENTITY,
                    meal_id INT,
                    PRIMARY KEY(ingredient_id),
                    CONSTRAINT fk_meal FOREIGN KEY (meal_id) REFERENCES meals(meal_id))
                    """);
            statement.executeUpdate("""
                    CREATE TABLE IF NOT EXISTS plan(
                    day INT,
                    meal_id INT,
                    PRIMARY KEY(day, meal_id),
                    CONSTRAINT fk_meal FOREIGN KEY (meal_id) REFERENCES meals(meal_id))
                    """);
        }
    }

    public List<Meal> findMealsByCategory(MealCategory category, boolean ordered) {
        String query = "SELECT * FROM meals WHERE category = ?";
        if (ordered) {
            query = query + " ORDER BY meal";
        }
        try(Connection con = dataSource.getConnection();
            PreparedStatement ps = con.prepareStatement(query)) {
            ps.setString(1, category.toString());
            ResultSet rs = ps.executeQuery();
            if (rs.isBeforeFirst()) {
                List<Meal> meals = new ArrayList<>();
                while (rs.next()) {
                    int id = rs.getInt("meal_id");
                    String name = rs.getString("meal");
                    List<Ingredient> ingredients = findIngredientsByMealId(id);
                    meals.add(new Meal(id, category, name, ingredients));
                }
                return meals;
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return List.of();
    }

    private List<Ingredient> findIngredientsByMealId(int mealId) throws SQLException {
        try(Connection con = dataSource.getConnection();
            PreparedStatement ps = con.prepareStatement("SELECT ingredient FROM ingredients WHERE meal_id = ?")) {
            ps.setInt(1, mealId);
            ResultSet rs = ps.executeQuery();
            if (rs.isBeforeFirst()) {
                List<Ingredient> ingredients = new ArrayList<>();
                while (rs.next()) {
                    String ingredient = rs.getString("ingredient");
                    ingredients.add(new Ingredient(ingredient));
                }
                return ingredients;
            }
        }
        return List.of();
    }

    public void addMeal(Meal meal) {
        try (Connection con = dataSource.getConnection();
             PreparedStatement ps = con.prepareStatement("INSERT INTO meals VALUES (?,?) RETURNING meal_id")) {
            ps.setString(1, meal.getCategory().toString());
            ps.setString(2, meal.getName());
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                addMealIngredients(meal.getIngredients(), rs.getInt("meal_id"), con);
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    private void addMealIngredients(List<Ingredient> ingredients, int mealId, Connection con) {
        try(PreparedStatement ps = con.prepareStatement("INSERT INTO ingredients (ingredient, meal_id) VALUES (?, ?)")) {
            con.setAutoCommit(false);
            for (Ingredient i : ingredients) {
                ps.setString(1, i.getIngredient());
                ps.setInt(2, mealId);
                ps.addBatch();
            }
            ps.executeBatch();
            con.commit();
            con.setAutoCommit(true);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    public void addWeeklyPlan(List<Plan> planList) {
        try(Connection con = dataSource.getConnection();
            Statement st = con.createStatement();
            PreparedStatement ps = con.prepareStatement("INSERT INTO plan VALUES (?, ?)")) {
            st.executeUpdate("DELETE FROM plan");
            con.setAutoCommit(false);
            for (Plan plan : planList) {
                for (MealCategory category: MealCategory.values()) {
                    Meal meal = plan.getPlannedMealFor(category);
                    ps.setInt(1, plan.getDay().ordinal());
                    ps.setInt(2, meal.getMealId());
                    ps.addBatch();
                }
            }
            ps.executeBatch();
            con.commit();
            con.setAutoCommit(true);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    public boolean isWeeklyPlanAvailable() {
        try(Connection con = dataSource.getConnection();
            Statement st = con.createStatement()) {
            ResultSet rs = st.executeQuery("SELECT COUNT(day) FROM plan");
            if (rs.next()) {
                int count = rs.getInt("count");
                if (count == 21) {
                    return true;
                }
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return false;
    }

    public List<Ingredient> findWeeklyPlanIngredientsList() {
        try(Connection con = dataSource.getConnection();
            Statement st = con.createStatement()){
            String query = """
                    SELECT ingredients.ingredient, COUNT(ingredients.ingredient)\s
                    FROM plan INNER JOIN meals ON plan.meal_id = meals.meal_id\s
                    INNER JOIN ingredients ON ingredients.meal_id = meals.meal_id\s
                    GROUP BY ingredients.ingredient
                    """;
            ResultSet rs = st.executeQuery(query);
            if (rs.isBeforeFirst()) {
                List<Ingredient> ingredients = new ArrayList<>();
                while (rs.next()) {
                    String ingredient = rs.getString("ingredient");
                    int count = rs.getInt("count");
                    ingredients.add(new Ingredient(ingredient, count));
                }
                return ingredients;
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return List.of();
    }
}
